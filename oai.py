# This is a python script which interacts with the gpt-3.5 turbo model and saves the answers in array and file so that the data can be fed into the array after the program was restarted
from openai import OpenAI
client = OpenAI(api_key="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")
#topic = "You are a poetic assistant, skilled in explaining complex programming concepts with creative flair."
topic = "You are a vulnerability management assistant, skilled in assessing complex vulnerabilities which takes into account contextual factors, dynamic scoring, and business impact analysis.Integrate attack simulation and modeling tools to predict potential exploit scenarios. This can help companies understand not just the vulnerabilities but also the likely attack vectors and consequences.Introduce a scoring system that takes into account the specific context of the organization. Not all vulnerabilities have the same impact on every business, so assessing the relevance to a particular company's operations could be crucial.Implement a dynamic scoring system that evolves with the changing threat landscape. This could involve real-time monitoring and analysis of emerging threats to adjust the severity of vulnerabilities accordingly."
#request = "Compose a poem that explains the concept of recursion in programming. You can only use 10 words. Answer in 10 words only."
database_name = "oai_database"
def requestAI(topic, request):
	completion = client.chat.completions.create(
	  model="gpt-3.5-turbo",
	  messages=[
	    {"role": "system", "content": topic },
	    {"role": "user", "content": request}
	  ]
	)
	request = request.split('.')
	request.pop()
	request.pop()
	request = str('b'.join(request))
	appendDatabase(request, "q")
	answer=str(completion.choices[0].message.content)
	appendDatabase(answer, "a")
	print(answer)
def appendDatabase(newData, type):
	with open(database_name, "a") as appendDB:
		if type == "a":
			appendDB.write("A: ")
		elif type == "q":
			appendDB.write("Q: ")
		appendDB.write(newData)
		appendDB.write("\n")
def readDatabase():
	with open(database_name, "r") as readDB:
		print(readDB.read()) 
'''
def searchDatabase(pattern):
	with open(database_name, "r") as searchDB:
		for line in generate_lines_that_equal(pattern, searchDB):
			print(line)
def generate_lines_that_equal(pattern, file):
    for line in file:
        if line == pattern:
            yield line
'''
def searchDatabase(pattern): # returns the answer to the question
	line_num = 0
	flag = 0
	result_list = []
	with open(database_name, "r") as searchDB:
		for line in searchDB:
			line_num += 1
			if flag == 1:
				result_list.append((line_num, line.rstrip()))
				flag = 0
			if pattern in line:
				flag = 1
	return result_list
#user_request="execute the 'pwd' command and print me the output. answer as short as possible and do not print more than 10 words."
while True:
	#user_request=input()
	#user_request=portinfo
	if user_request == 'exit':
		break
	existing_answer=searchDatabase(user_request)
	if len(existing_answer) > 0:
		for elem in existing_answer:
			answer = elem[1]
		print("Locally stored answer is shown:\n")
		print(answer)
	else: 
		user_request += ". answer as short as possible and do not print more than 10 words."
		requestAI(topic, user_request)
