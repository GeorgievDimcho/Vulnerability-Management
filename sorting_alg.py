import csv
import sys

# Check if enough arguments are provided
if len(sys.argv) != 2:
    print("Usage: python sorting_alg.py <input_file>")
    sys.exit(1)
existing_cvs = []
output_file = sys.argv[1]+"_sorted"
with open(sys.argv[1], mode="r", newline="", encoding="utf-8") as imported:
    line = imported.readline()  # Read the first line
    while line:
        # Process the line
        existing_cvs.append(line.strip())
        # Read the next line
        line = imported.readline()

csv_file = "res/vuln_downloaded_data/CVE.csv"
with open(csv_file, mode="r", newline="", encoding="utf-8") as csvfile:
    reader = csv.DictReader(csvfile)
    vulnerabilities = list(reader)  # Convert to list of dictionaries
# Weights for each parameter
WEIGHTS = [0.3, 0.3, 0.4]  # CVSS, EPSS, CISA
CVSS_keywords = ["'CVE'", "'CVSS2_baseScore'", "'CVSS3_baseScore'", "'CVSS2_exploitabilityScore'", "'CVSS3_exploitabilityScore'",
                 "'CVSS2_impactScore'", "'CVSS3_impactScore'", "'EPSS'", "'CISA_dateAdded'"]


def calculate_composite_score(vulnerability):
    cve = {}
    score = [0, 0, 0]
    cvss_couter = 0
    for key, value in vulnerability.items():
        value = value.replace("'", "")
        if (isANumber(value)):
            if (key == CVSS_keywords[6]):
                score[1] = float(value)*10
            else:
                score[0] += float(value)
                cvss_couter += 1
        if (key == CVSS_keywords[len(CVSS_keywords)-1]):
            score[2] = 1
    if cvss_couter > 0:
        score[0] /= cvss_couter
    result = 0.0
    for i in range(0, 2):
        result += float(WEIGHTS[i])*float(score[i])
    return result


def isANumber(s):
    try:
        try:
            float(s)
            return True
        except ValueError:
            return False
        int(s)
        return True
    except ValueError:
        return False


# Remove keys with specific unwanted values
cleaned_vulnerabilities = []
for v in vulnerabilities:
    cleaned_dict = {}
    for k, val in v.items():
        if val not in [None, "'null'", "NULL", "null", "None", "'NONE'"] and k in CVSS_keywords:
            cleaned_dict[k] = val  # Keep only valid key-value pairs
    cleaned_vulnerabilities.append(cleaned_dict)  # Add to cleaned list
# Sort vulnerabilities based on composite score in descending order
sorted_vulnerabilities = sorted(
    cleaned_vulnerabilities,
    key=lambda v: calculate_composite_score(v),
    reverse=True
)
# Find the index of the dictionary with the given 'cve_id'
index = {}
for i, d in enumerate(sorted_vulnerabilities):
    for l in range(0, len(existing_cvs)):
        cve = str(d[CVSS_keywords[0]])
        cve = cve.replace("'", "")
        if cve == existing_cvs[l]:
            index[existing_cvs[l]] = i
keys_list = list(index.keys())
with open(output_file, mode="w", encoding="utf-8") as file:
    # Loop through each dictionary and get the value of "name"
    for item in keys_list:
        file.write(item + '\n')
