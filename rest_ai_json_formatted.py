import tempfile
import urllib.request
import json
import os
import ssl
import datetime
from azure.ai.ml import MLClient
from azure.identity import DefaultAzureCredential, InteractiveBrowserCredential
current_time = str(datetime.datetime.now()).replace(" ", "")
file_name = "reports/report_"+current_time
try:
    credential = DefaultAzureCredential()
    credential.get_token("https://management.azure.com/.default")
except Exception as ex:
    credential = InteractiveBrowserCredential()

workspace_ml_client = MLClient(
    credential,
    subscription_id=os.getenv("SUBSCRIPTION_ID"),
    resource_group_name=os.getenv("RESOURCE_GROUP"),
    workspace_name=os.getenv("WORKSPACE_NAME"),
)
file1 = open("new_file", "r")
i = 0
while (i < 10):
    line = file1.readline()
    content = "I have discovered the following vulnerability on my server: " + line + \
        " . Please write a report explaining what causes the vulnerability. Where is the vulnerability comming from? What potential impact does it have? Step by step guide how to fix this vulnerability. including linux commands to run. explain how the measures you are giving will improve the security."
    data = {"input_data": {
        "input_string": [{"role": "user", "content": content}],
        "parameters": {"temperature": 0.7, "top_p": 0.9, "do_sample": True, "max_new_tokens": 1000, }, }
    }
    api_key = 'OxjKKuU8kK5KAQmQxaUjBwoyJyXnx6Dq'
    if not api_key:
        raise Exception("A key should be provided to invoke the endpoint")
    try:
        with tempfile.NamedTemporaryFile(suffix=".json", delete=False, mode='w') as temp:
            json.dump(data, temp)
            temp_file_name = temp.name
        response = workspace_ml_client.online_endpoints.invoke(
            endpoint_name=os.getenv("ENDPOINT_NAME"),
            deployment_name=os.getenv("DEPLOYMENT_NAME"),
            request_file=temp_file_name,
        )
        response_json = json.loads(response)["output"]
        response_dict = {'content': response_json, 'role': 'assistant'}
        data['input_data']['input_string'].append(response_dict)
       # print(json.dumps(data["input_data"]["input_string"], indent=4))
        with open(file_name, "a") as f:
            print(json.dumps(response_json).replace("\\n", "\n"), file=f)
        # print(json.dumps(response_json))
    except urllib.error.HTTPError as error:
        print("The request failed with status code: " + str(error.code))

        # Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
        print(error.info())
        print(error.read().decode("utf8", 'ignore'))

    i += 1
file1.close()
