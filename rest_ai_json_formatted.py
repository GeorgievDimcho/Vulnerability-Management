import tempfile  # Module to create temporary files and directories
import urllib.request  # For sending HTTP requests
import json  # To work with JSON data
import os  # For interacting with the operating system
# Azure ML client to interact with Machine Learning services
from azure.ai.ml import MLClient
# Azure authentication credentials
from azure.identity import DefaultAzureCredential, InteractiveBrowserCredential
import sys  # For accessing system arguments and other system-level functionality
# For accessing system arguments and other system-level functionality
if len(sys.argv) != 2:
    # Provide usage instructions
    print("Usage: python rest_ai_json_formatted.py <input_file>")
    sys.exit(1)  # Exit if incorrect number of arguments is provided
# Get the input file name from the command-line argument
sorted_file_name = sys.argv[1]
output_file_name = sorted_file_name+"_report"  # Name for the output report
# Try to initialize Azure credentials
try:
    credential = DefaultAzureCredential()  # Use default credentials
    # Test if credentials work
    credential.get_token("https://management.azure.com/.default")
except Exception as ex:
    # Fallback to interactive browser authentication
    credential = InteractiveBrowserCredential()

# Create an ML client with the given credentials and workspace information
workspace_ml_client = MLClient(
    credential,
    # Get subscription ID from environment variables
    subscription_id=os.getenv("SUBSCRIPTION_ID"),
    # Get resource group from environment variables
    resource_group_name=os.getenv("RESOURCE_GROUP"),
    # Get workspace name from environment variables
    workspace_name=os.getenv("WORKSPACE_NAME"),
)
# Open the input file and read its content
file1 = open(sorted_file_name, "r")
i = 0  # Initialize a counter for iteration
# Loop to process the first 10 lines of the input file
while (i < 10):
    line = file1.readline()  # Read a line from the input file
    # Loop to process the first 10 lines of the input file
    content = "I have discovered the following vulnerability on my server: " + line + \
        " . Please write a report explaining what causes the vulnerability. Where is the vulnerability comming from? What potential impact does it have? Step by step guide how to fix this vulnerability. including linux commands to run. explain how the measures you are giving will improve the security."
    # Loop to process the first 10 lines of the input file
    data = {"input_data": {
        # User-provided content
        "input_string": [{"role": "user", "content": content}],
        "parameters": {"temperature": 0.7  # Control for randomness
                       , "top_p": 0.9,  # Controls diversity of output
                       "do_sample": True,  # Whether to sample from the model's output
                       "max_new_tokens": 1000,  # Maximum number of tokens to generate
                       }, }
            }
    # API key for endpoint access
    api_key = os.getenv("API_KEY")
    if not api_key:
        # Ensure API key is provided
        raise Exception("A key should be provided to invoke the endpoint")
    # Attempt to invoke the endpoint and get a response
    try:
        # Create a temporary JSON file to store the request data
        with tempfile.NamedTemporaryFile(suffix=".json", delete=False, mode='w') as temp:
            json.dump(data, temp)  # Save the data to the temporary file
            temp_file_name = temp.name  # Get the name of the temporary file
        # Invoke the endpoint with the request data
        response = workspace_ml_client.online_endpoints.invoke(
            # Get endpoint name from environment variables
            endpoint_name=os.getenv("ENDPOINT_NAME"),
            # Get deployment name from environment variables
            deployment_name=os.getenv("DEPLOYMENT_NAME"),
            request_file=temp_file_name,  # Use the temporary file as the request payload
        )
        # Parse the response and prepare to store it in the output file
        # Load the JSON response
        response_json = json.loads(response)["output"]
        response_dict = {'content': response_json,
                         'role': 'assistant'}  # Store the response data
        data['input_data']['input_string'].append(
            response_dict)  # Add the response to the data
        # Open the output file in append mode and save the response
        with open(output_file_name, "a") as f:
            print(json.dumps(response_json).replace("\\n", "\n"),
                  file=f)  # Save the response to the output file
    # Handle HTTP errors from the endpoint invocation
    except urllib.error.HTTPError as error:
        # Print an error message and HTTP error code
        print("The request failed with status code: " + str(error.code))
        # Print additional error information and the response body for debugging
        print(error.info())
        print(error.read().decode("utf8", 'ignore'))

    i += 1  # Increment the iteration counter
file1.close()  # Close the input file after processing
