import subprocess
import time
import sys
import datetime
if len(sys.argv) != 2:
    print("Usage: python main.py <ip_addr>")
    sys.exit(1)
IP_ADDR = sys.argv[1]
try:
    if subprocess.check_output(["ping", "-c", "1", IP_ADDR]):
        print("The VM is up and running!")
except:
    print("I cannot reach the VM. Check the IP_ADDR and double check if the VM is running.")
    sys.exit(1)
file_name = "reports/"+str(datetime.datetime.now()).replace(" ",
                                                            "").replace("-", "_").replace(":", "_").replace(".", "_")
try:
    # if subprocess.check_output(["nmap", "-sT", "-F", "-T5", "-oN", file_name, IP_ADDR]):
    # if subprocess.check_output(["nmap", "-sV", "-p-", "-Pn", "-n", "--version-all", "--open", "-oN", file_name, IP_ADDR]):
    # if subprocess.check_output(["nmap", "--script", "vulners",  "-sV", "-p-", "-Pn", "-n", "--version-all", "--open", "-oN", file_name, IP_ADDR]):
    # if subprocess.check_output(["nmap", "--script", "vuln",  "-sV", "-p-", "-Pn", "-n", "--version-all", "--open", "-oN", file_name, IP_ADDR]):
    # nmap -sV --script=vulscan/vulscan.nse --script-args vulscandb=allitems.csv 192.168.1.11 -oN ~/vuln_allitem
    # if subprocess.check_output(["nmap", "--script=vulscan/vulscan.nse", "--script-args", "vulscandb=allitems.cvs", "-sV", "-p-", "-Pn", "-n", "--version-all", "--open", "-oN", file_name, IP_ADDR]):

    if subprocess.check_output(["nmap", "-sV", "--script=vulscan/vulscan.nse", "--script-args", "vulscandb=allitems.csv", IP_ADDR, "-oN", file_name]):
        print("The Nmap scan was successful and the report is saved - " + file_name)
    time.sleep(3)
    if subprocess.check_output(["python", "parse.py", file_name]):
        print("The file was parsed")
    unsorted_file_name = file_name+"_awk"
    sorted_file_name = unsorted_file_name+"_sorted"
    if subprocess.check_output(["python", "sorting_alg.py", unsorted_file_name]):
        print("The prioritization completed successfully. The file is saved as " + sorted_file_name)
    report_file_name = sorted_file_name+"_report"
    if subprocess.check_output(["python", "rest_ai_json_formatted.py", sorted_file_name]):
        print("The prioritization completed successfully. The file is saved as " + report_file_name)

    # uncomment the following section to run the cve_prioritizer from https://github.com/TURROKS/CVE_Prioritizer
    '''
	# The following code only works when there is an internet connection
	# Therefore I found a way to download the information and save it locally
	# Then I wrote a script which prioritizes the vulnerabilities without needing internet connection
	cve_file_name=prefix_path+file_name+"_cve.csv"
	if subprocess.check_output(["python", "/home/pi/Documents/app/CVE_Prioritizer-1.4.0/cve_prioritizer.py", "-f", new_file_name, "-o", cve_file_name]):
		print("The CVE_Prioritizer was started successfully")
	'''
except Exception as e:
    print(e)
    print("The script encountered an error")
    sys.exit(1)
